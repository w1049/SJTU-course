#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	# xorq %rax, %rax		# count = 0;
	iaddq $-8, %rdx		# len -= 8
	jl Remain		# if len < 8, goto Remain

Loop:
	mrmovq (%rdi), %r10		# read val from src...
	mrmovq 8(%rdi), %r11		# read val from src...
	mrmovq 16(%rdi), %r12		# read val from src...
	mrmovq 24(%rdi), %r13		# read val from src...
	mrmovq 32(%rdi), %r14		# read val from src...
	mrmovq 40(%rdi), %r9		# read val from src...
	mrmovq 48(%rdi), %r8		# read val from src...
	mrmovq 56(%rdi), %rcx		# read val from src...
	rmmovq %r10, (%rsi)		# ...and store it to dst
	rmmovq %r11, 8(%rsi)		# ...and store it to dst
	rmmovq %r12, 16(%rsi)		# ...and store it to dst
	rmmovq %r13, 24(%rsi)		# ...and store it to dst
	rmmovq %r14, 32(%rsi)		# ...and store it to dst
	rmmovq %r9, 40(%rsi)		# ...and store it to dst
	rmmovq %r8, 48(%rsi)		# ...and store it to dst
	rmmovq %rcx, 56(%rsi)		# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:
	andq %r11, %r11			# val <= 0?
	jle Npos2		# if so, goto Npos2:
	iaddq $1, %rax		# count++
Npos2:
	andq %r12, %r12		# val <= 0?
	jle Npos3		# if so, goto Npos3:
	iaddq $1, %rax		# count++
Npos3:
	andq %r13, %r13		# val <= 0?
	jle Npos4		# if so, goto Npos4:
	iaddq $1, %rax		# count++
Npos4:
	andq %r14, %r14		# val <= 0?
	jle Npos5		# if so, goto Npos5:
	iaddq $1, %rax		# count++
Npos5:
	andq %r9, %r9		# val <= 0?
	jle Npos6		# if so, goto Npos6:
	iaddq $1, %rax		# count++
Npos6:
	andq %r8, %r8		# val <= 0?
	jle Npos7		# if so, goto Npos7:
	iaddq $1, %rax		# count++
Npos7:
	andq %rcx, %rcx		# val <= 0?
	jle Npos8		# if so, goto Npos8:
	iaddq $1, %rax		# count++
Npos8:
	iaddq $64, %rdi		# src += 8
	iaddq $64, %rsi		# dst += 8
	iaddq $-8, %rdx		# len -= 8
	jge Loop			# goto Loop:

Remain:
	iaddq $5, %rdx		# len - 3
	jl Remain1		# R2 R1 R0
	jg R4		# len > 3
	# je R3
R3:
	mrmovq 16(%rdi), %r10
	mrmovq 8(%rdi), %r11
	mrmovq (%rdi), %r12
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 8(%rsi)
	rmmovq %r12, (%rsi)
	andq %r10, %r10
	jle R3N1
	iaddq $1, %rax
R3N1:
	andq %r11, %r11
	jle R3N2
	iaddq $1, %rax
R3N2:
	andq %r12, %r12
	jle R3N3
	iaddq $1, %rax
R3N3:
	ret

Remain1:
	iaddq $2, %rdx		# len - 1
	je R1
	jg R2
	ret # jl Done, R0

R4:
	mrmovq (%rdi), %r10
	mrmovq 8(%rdi), %r11
	mrmovq 16(%rdi), %r12
	mrmovq 24(%rdi), %r13
	rmmovq %r10, (%rsi)
	rmmovq %r11, 8(%rsi)
	rmmovq %r12, 16(%rsi)
	rmmovq %r13, 24(%rsi)
	andq %r10, %r10
	jle R4N1
	iaddq $1, %rax
R4N1:
	andq %r11, %r11
	jle R4N2
	iaddq $1, %rax
R4N2:
	andq %r12, %r12
	jle R4N3
	iaddq $1, %rax
R4N3:
	andq %r13, %r13
	jle R4N4
	iaddq $1, %rax
R4N4:
	iaddq $-1, %rdx		# len - 4
	jne R567
	ret		# len = 0
R567:
	iaddq $-2, %rdx		# len - 6
	je R6
	jl R5

R7:
	mrmovq 48(%rdi), %r10
	rmmovq %r10, 48(%rsi)
	andq %r10, %r10
R6:
	mrmovq 40(%rdi), %r11
	jle R7N1
	iaddq $1, %rax
R7N1:
	rmmovq %r11, 40(%rsi)
	andq %r11, %r11
R5:
	mrmovq 32(%rdi), %r12
	jle R7N2
	iaddq $1, %rax
R7N2:
	rmmovq %r12, 32(%rsi)
	andq %r12, %r12
	jle R7N3
	iaddq $1, %rax
R7N3:
	ret

R2:
	mrmovq 8(%rdi), %r11
	rmmovq %r11, 8(%rsi)
	andq %r11, %r11
R1:
	mrmovq (%rdi), %r12
	jle R2N1
	iaddq $1, %rax
R2N1:
	rmmovq %r12, (%rsi)
	andq %r12, %r12
	jle R2N2
	iaddq $1, %rax
R2N2:
	# ret
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
